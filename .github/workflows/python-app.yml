name: Python application
#description: 'Check commits with linters, unit and e2e tests'

on:
  push:
    branches:
      - '**'
      - '!main'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix: 
        version: [1]

    steps:
      - name: defauld directory
        run: |
          echo "CurrentDirectory=$(pwd)" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Install Miniconda and update dependencies
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          source "$HOME/miniconda/etc/profile.d/conda.sh"
          conda activate base
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda
          conda env update --file environment.yml --name base
        env:
          CONDA_HOME: $HOME/miniconda
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install tools from PyPI
        run: |
          pip install pyftpdlib
          pip install pylint
          pip install psutil
          pip install pymongo
          pip install hvac
          pip install flake8
          pip install pytest
          pip install boto3
          pip install -r  requirements.txt
      - name: Lint with flake8
        run: |
          cd "$CurrentDirectory"
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run Pylint
        run: |
          pylint $(git ls-files '*.py')
      - name: Set up MongoDB
        run: |
          docker run -d --name mongodb -p 27017:27017 mongo:latest
          sleep 10  # Wait for MongoDB to start
        timeout-minutes: 3
  
      - name: Create MongoDB Collection
        run: |
          # Install MongoDB client
          # apt-get update
          #apt-get install -y mongodb-clients
          
          # Wait for MongoDB to start
          sleep 10
          
          # Create a collection for testing
          #sudo -u mongodb mongo --eval 'db.createCollection("nill-home-photos")' localhost/nill-home
          python setuptstmongo.py
        timeout-minutes: 3
        
      - name: Start FTP server
        env:
          IS_TEST: "GHA"
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_ACCESS: ${{ secrets.AWS_ACCESS_KEY }}
        run: python __main__.py &


      - name: Test unit tests with pytest
        env:
          IS_TEST: "GHA"
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}    
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }} 
        run: |
          cd $CurrentDirectory
          pytest  './tests/test_unit.py'

          
      - name: Test e2e tests with pytest
        env:
          IS_TEST: "GHA"
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          pytest  './tests/test_core.py'
